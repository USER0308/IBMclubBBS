进入虚拟环境,连接数据库
之前member_models中email是ForeignKey,此时实际上连接的是Application中的id而不是email,因为email不是主码,所以也不是外码
修改为
	email = models.EmailField(null=False) 
修改application_models中choice的默认值default为组织部
将code_models中email外码修改为EmailField
	email = models.EmailField(null=False)

修改了forms中的Sign_Up_Form
from mysite.models import Application_Model,Member_Model,Code_Model

class Sign_Up_Form(forms.ModelForm):
	email = fields.EmailField(
		label='email',
		required=True,
		error_messages={
		'invalid':'invalid input'		
	})
	code = fields.CharField(
		label='code',
		min_length=10,
		max_length=10,
		required=True,
		error_messages={
			'required':'empty input',
			'min_length':'it should be 10 char',
			'max_length':'it should be 10 char'
		})
	password = fields.CharField(label='password',max_length=128,required=True,widget=forms.PasswordInput)
	password_confirm = fields.CharField(label='password_confirm',max_length=128,required=True,widget=forms.PasswordInput)
	
	nick_name = fields.CharField(label='nick_name',required=False,max_length=20)
	department = forms.ChoiceField(required=False,label='department',choices=[(u'秘书部','秘书部'),(u'人力资源部','人力资源部'),(u'宣传部','宣传部'),(u'组织部','组织部')])
	phone_number = fields.CharField(label='phone_number',required=False,max_length=11,min_length=11)
	address = fields.CharField(label='address',required=False,max_length=10)
	class Meta:
		app_label='mysite'
		model = Member_Model
		fields = ('email','password','nick_name','department','phone_number','address')

	def clean(self):
		return self.cleaned_data

	def clean_email(self):
		get_email = self.cleaned_data['email']
		is_email_exist = Member_Model.objects.filter(email=get_email).exists()
		print("before check email_is exist")
		if is_email_exist:
			raise forms.ValidationError("this email has been used")
		return get_email

	def clean_code(self):
		#code and password are satisfy
		get_email = self.cleaned_data.get("email")
		get_code = self.cleaned_data.get("code")
		if get_email is None:
			return get_code
		print('getmail is')
		print(get_email)
		print(get_code)
		is_satisfy = Code_Model.objects.filter(email=get_email,code=get_code).exists()
		if not is_satisfy:
			raise forms.ValidationError('code and email are not satisfy')
		return get_code

	def clean_password_confirm(self):
		password_1 = self.cleaned_data.get("password")
		password_2 = self.cleaned_data.get("password_confirm")
		if password_1 and password_2 and password_1 != password_2:
			raise forms.ValidationError('password confirm failed')
		return password_2

sign_up_views中注释了部分debug语句
urls中r'home_page$'更改为r'^home_page$'
application_templates.html中修改button为超链接,增加跳转路由
		<p>
			I am a member of IBM club
			<a href="/mysite/login/">Login</a>			
		</p>
		<p>
			I have invitation code of IBM club
			<a href="/mysite/sign_up">Sign</a>
		</p>

检查__init__是否导入相关的models和views
